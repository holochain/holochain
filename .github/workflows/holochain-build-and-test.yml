name: "holochain build and test"

on:
  workflow_call:
    inputs:
      repo_path:
        description: "a path to the holochain repository"
        required: false
        type: string
        default: "."

jobs:
  "test":
    strategy:
      fail-fast: false
      matrix:
        cmd:
          # ensure functionality on multiple platforms
          - pkgs:
              - build-holochain-tests-unit-all
              - build-holonix-tests-integration
            extra_arg: "--override-input versions \"github:holochain/holochain?dir=versions/weekly\" --override-input holochain ${{ inputs.repo_path }}"
            cache_push: false

          # ensures to keep the cache populated for the supported versions on multiple platforms
          - pkgs:
              - build-holonix-tests-integration
            extra_arg: "--override-input versions \"github:holochain/holochain?dir=versions/0_2\""
            cache_push: true
          - pkgs:
              - build-holonix-tests-integration
            extra_arg: "--override-input versions \"github:holochain/holochain?dir=versions/0_1\""
            cache_push: true
          - pkgs:
              - build-holonix-tests-integration
            extra_arg: "--override-input versions \"github:holochain/holochain?dir=versions/weekly\""
            cache_push: true
        platform:
          - system: x86_64-darwin
          - system: aarch64-darwin
          - system: x86_64-linux

        include:
          # we only run repo consistency checks on x86_64-linux
          - cmd:
              pkgs:
                - build-holochain-build-crates-standalone
                - build-release-automation-tests
                - build-release-automation-tests-repo
                - build-holochain-tests-static-all
              extra_arg: "--override-input versions \"github:holochain/holochain?dir=versions/weekly\" --override-input holochain ${{ inputs.repo_path }}"
              cache_push: false
            platform:
              system: x86_64-linux

    # runs-on: ${{ matrix.platform.runs-on }}
    runs-on: [self-hosted, multi-arch]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          lfs: false

      - name: Print matrix
        env:
          MATRIX: ${{ toJSON(matrix) }}
        run: echo ${MATRIX}

      - name: "Test command ${{ matrix.nixCommand }}"
        env:
          system: ${{ matrix.platform.system }}
          NIX_CONFIG: "access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}"
          CACHIX_AUTH_TOKEN: "${{ secrets.TS_CACHIX_TOKENnoexist }}"
        run: |
          set -xe

          # if a nix store path was passed, ensure it exists locally
          if [[ ${{ inputs.repo_path }} == "/nix/"* ]]; then
            nix-store --realise ${{inputs.repo_path }}
          fi

          # first build all derivations. this could be enough for test derivations.
          nix build -L --show-trace \
            ${{ matrix.cmd.extra_arg }} \
            .#packages.${system}.${{ join(matrix.cmd.pkgs, ' .#packages.${system}.')}}

          # TODO: remove this once we've implemented all tests and know that we don't need it
          # if there's something to run we generate separate commands
          # if [[ ${{ matrix.cmd.verb }} == "run" ]]; then
          #   export basecmd="nix run -L --show-trace .#packages.${system}."
          #   ${basecmd}${{ join(matrix.cmd.pkgs, '; ${basecmd}') }}
          # fi
          
          if [[ ${{ matrix.cmd.cache_push }} == "true" ]]; then
            # See https://docs.cachix.org/pushing#id1
          
            profile_name=holonix-cache-${system}
            nix develop --profile $profile_name -c true \
              ${{ matrix.cmd.extra_arg }} \
              .#devShells.${system}.holonix
          
            ls -al
            
            cachix authtoken $CACHIX_AUTH_TOKEN
            cachix push thetasinner-testing $profile_name
          fi
