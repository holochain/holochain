name: detect critical check failures

on:
  status: {}

jobs:
  investigate_event:
    runs-on: ubuntu-latest
    if: >-
      (github.event.state == 'error' || github.event.state == 'failure')
      && github.event.description != 'Your CircleCI tests were canceled'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2.4.0
      - name: investigate and notify
        env:
          STATE: ${{ github.event.state }}
          DESCRIPTION: ${{ github.event.description }}
          GITHUB_TOKEN: ${{ secrets.HRA_GITHUB_TOKEN }}

          # dev/HC-releases
          MM_CHANNEL_ID: "cdxeytdc97ff3e1jbdzgyfcduo"
          HRA_MATTERMOST_TOKEN: ${{ secrets.HRA_MATTERMOST_TOKEN }}
        run: |
          set -x +e

          export BRANCH_PREFIX="release-"

          echo "$STATE": "$DESCRIPTION"
          jq < ${GITHUB_EVENT_PATH}

          # ignore this check if the commit is already on the default base branch
          export pr_base="$(jq --raw-output '.repository.default_branch' < ${GITHUB_EVENT_PATH})"

          if [[ "true" == $(jq --raw-output '.branches | map(select(.name  == env.pr_base) | .name) | length != 0' < ${GITHUB_EVENT_PATH}) ]]; then
            exit 0
          fi

          # try to find the branch in the 'branches' array.
          # this array is not populated for status updates that came in from release CI runs.
          # this is because the commit is the result of merging the PR with the base branch
          export pr_head="$(jq --raw-output '.branches | map(select(.name | startswith(env.BRANCH_PREFIX)) | .name) | .[0]' < ${GITHUB_EVENT_PATH})"

          # try to use the most recent parent to identify the branch
          if [[ "${pr_head}" == null ]]; then
            parent_commit=$(jq --raw-output '.commit.parents[-1].sha' < ${GITHUB_EVENT_PATH})
            git fetch --all
            export pr_head=$(git branch -a --contains ${parent_commit} --format '%(refname:short)' | sed 's/origin\///' | uniq | jq --raw-output --raw-input --slurp 'split("\n") | .[0:-1] | map(select(startswith(env.BRANCH_PREFIX)))[0]')
          fi

          if [[ "${pr_head}" == null ]]; then
            echo failing commit is not part of a release pr, exiting.
            exit 0
          fi

          export target_url="$(jq --raw-output '.target_url' < ${GITHUB_EVENT_PATH})"
          export pr_number="$(gh pr list --state open --json number --jq '.[0].number' --base ${pr_base} --head ${pr_head})"

          gh pr edit ${pr_number} --add-reviewer "@holochain/core-dev"

          cat <<EOF | gh pr comment ${pr_number} --body-file -
          ${STATE}: ${target_url}

          this PR was determined to be part of a release due to its branch prefix _${BRANCH_PREFIX}_.
          EOF

          message=$(cat <<-EOF
          ##### [PR#${pr_number} _$(gh pr view ${pr_number} --json title --jq '.title')_ ]($(gh pr view ${pr_number} --json url --jq '.url')): check ${STATE}

          [${DESCRIPTION} (click here for details)](${target_url})

          this PR was determined to be part of a release due to its branch prefix _${BRANCH_PREFIX}_.
          EOF)
          export message

          # send a mattermost message
          data=$(jq -n --compact-output '{"channel_id":env.MM_CHANNEL_ID, "message":env.message, "props":{"version":env.VERSION}}')
          curl -X POST -H "Authorization: Bearer ${HRA_MATTERMOST_TOKEN}" -d "$data" https://chat.holochain.org/api/v4/posts
