# Loaded as part for `release.yml`
# Contains a single job called `prepare`.
#
# As input it receives a branch to be released (aka. source branch).
# It then merges the source branch into the release branch (usually `release`).
#
# The merged state of the repo is then serialized and cached to use in the subsequent `release.yml` workflow.
#
# This workflow also caches cargo related state and build files between runs.
#
#
# Relevant Steps:
# - Merge the source branch into the release branch
# - Restore holochain cargo related state and build files
# - (Checks files) Detect missing release headings
# - (Changes files) Generate crate READMEs from doc comments
# - (Changes files) Bump the crate versions for the release
# - Cache the repo and set outputs

on:
  workflow_call:
    inputs:
      dry_run:
        type: string
        required: true
      debug:
        type: string
        required: true
      skip_prepare_logic:
        type: string
        required: true

      HOLOCHAIN_SOURCE_BRANCH:
        type: string
        required: true
      HOLOCHAIN_TARGET_BRANCH:
        type: string
        required: true
      HOLOCHAIN_URL:
        type: string
        required: false
        default: "https://github.com/holochain/holochain"
      HOLOCHAIN_REPO:
        type: string
        required: false
        default: "/var/tmp/holochain_repo"
      CACHIX_REV:
        type: string
        required: true
    secrets:
      HRA_GITHUB_TOKEN:
        required: true
      CACHIX_SIGNING_KEY:
        required: true
      CACHIX_AUTH_TOKEN:
        required: true

    outputs:
      tag:
        description: "which holochain tag, if one, will be released"
        value: ${{ jobs.prepare.outputs.tag }}
      version:
        description: "which holochain version, if one, will be released"
        value: ${{ jobs.prepare.outputs.version }}
      release_branch:
        description: "the branch that contains the changes made during this action"
        value: ${{ jobs.prepare.outputs.release_branch }}
      repo_nix_store_path:
        description: "the nix-store path for the release repo that is a result of the preparation"
        value: ${{ jobs.prepare.outputs.repo_nix_store_path }}
      releasable_crates:
        description: "whether there are any releaseable crates"
        value: ${{ jobs.prepare.outputs.releasable_crates }}

jobs:
  prepare:
    env:
      HOLOCHAIN_REPO: ${{ inputs.HOLOCHAIN_REPO }}
      CACHIX_REV: ${{ inputs.CACHIX_REV }}
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.write-env-and-tag.outputs.tag }}
      version: ${{ steps.write-env-and-tag.outputs.version }}
      release_branch: ${{ steps.write-env-and-tag.outputs.release_branch }}
      repo_nix_store_path: ${{ steps.write-env-and-tag.outputs.repo_nix_store_path }}
      releasable_crates: ${{ steps.bump-versions.outputs.releasable_crates }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Install nix
        uses: cachix/install-nix-action@v19
      - name: Setup cachix
        uses: cachix/cachix-action@v12
        with:
          name: holochain-ci
          authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"
          installCommand: |
            nix-env -if https://github.com/cachix/cachix/tarball/${CACHIX_REV:?} \
              --substituters 'https://cache.nixos.org https://cachix.cachix.org' \
              --trusted-public-keys 'cachix.cachix.org-1:eWNHQldwUO7G2VkjpnjDbWwy4KQ/HNxht7H4SSoMckM= cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY='
      # - name: Set NIX_PATH (FIXME)
      #   run: echo NIX_PATH=nixpkgs=$(./scripts/nix_path.sh) >> $GITHUB_ENV

      - name: Merge ${{ inputs.HOLOCHAIN_SOURCE_BRANCH }} into ${{ inputs.HOLOCHAIN_TARGET_BRANCH }}
        env:
          HRA_GITHUB_TOKEN: ${{ secrets.HRA_GITHUB_TOKEN }}
          HOLOCHAIN_REPO: ${{ inputs.HOLOCHAIN_REPO }}
          HOLOCHAIN_SOURCE_BRANCH: ${{ inputs.HOLOCHAIN_SOURCE_BRANCH }}
          HOLOCHAIN_TARGET_BRANCH: ${{ inputs.HOLOCHAIN_TARGET_BRANCH }}
          HOLOCHAIN_URL: ${{ inputs.HOLOCHAIN_URL }}
        run: |
          set -exuE -o pipefail

          if [[ -d "${HOLOCHAIN_REPO}" ]]; then
            echo repository at ${HOLOCHAIN_REPO} unexpectedly exists
            exit 1
          fi
          mkdir -p "${HOLOCHAIN_REPO}"

          cd "${HOLOCHAIN_REPO}"

          if ! git status; then
            git init
            git remote add origin "${HOLOCHAIN_URL}"
          else
            echo unexpectedly got a git repo at $PWD
            exit 1
          fi

          cp -v $HOME/work/holochain/holochain/.git/config .git/config

          git fetch --all --tags --prune --prune-tags --force
          git branch --list --all
          git checkout --force -B ${HOLOCHAIN_SOURCE_BRANCH} remotes/origin/${HOLOCHAIN_SOURCE_BRANCH}

          # .gitignore might've changed
          git reset --hard
          git clean -fd

          obsolete_branches="$(git branch --list | sed -E 's/^ +//' | (grep -oE '^release-[0-9\.]+' || :))"
          if [[ -n "${obsolete_branches}" ]]; then
            git branch -D ${obsolete_branches}
          fi

          # Merge source branch into the release branch
          if ! (git branch --list --all | grep origin/${HOLOCHAIN_TARGET_BRANCH}); then
            git checkout -B ${HOLOCHAIN_TARGET_BRANCH}
          else
            git checkout --force -B ${HOLOCHAIN_TARGET_BRANCH} origin/${HOLOCHAIN_TARGET_BRANCH}
            git merge --ff-only "${HOLOCHAIN_SOURCE_BRANCH}"
          fi

      - name: Restore holochain cargo related state and build files
        if: ${{ inputs.skip_prepare_logic != 'true' }}
        uses: steveeJ-forks/actions-cache/restore@retry
        id: restore-build-files
        with:
          path: |
            /var/tmp/holochain_repo/.cargo/bin/
            /var/tmp/holochain_repo/.cargo/registry/index/
            /var/tmp/holochain_repo/.cargo/registry/cache/
            /var/tmp/holochain_repo/.cargo/git/db/
            /var/tmp/holochain_repo/target/
          key: ${{ runner.os }}-prepare-${{ github.run_id }}
          restore-keys: |
            ${{ runner.os }}-prepare
            ${{ runner.os }}-test-release-cargo-test-standard
            ${{ runner.os }}
          required: false

      - name: Detect missing release headings
        if: ${{ inputs.skip_prepare_logic != 'true' }}
        env:
          HOLOCHAIN_REPO: ${{ inputs.HOLOCHAIN_REPO }}
        run: |
          set -exu
          cd "${HOLOCHAIN_REPO}"

          nix develop .#release --ignore-environment --command release-automation \
              --workspace-path=$PWD \
              --log-level=debug \
              crate detect-missing-releaseheadings

      - name: Generate crate READMEs from doc comments
        if: ${{ inputs.skip_prepare_logic != 'true' }}
        env:
          HOLOCHAIN_REPO: ${{ inputs.HOLOCHAIN_REPO }}
        run: |
          cd "${HOLOCHAIN_REPO}"
          nix develop .#release --ignore-environment --command bash ./scripts/generate_readmes.sh

      - name: Bump the crate versions for the release
        id: bump-versions
        if: ${{ inputs.skip_prepare_logic != 'true' }}
        env:
          HOLOCHAIN_REPO: ${{ inputs.HOLOCHAIN_REPO }}
          HOLOCHAIN_SOURCE_BRANCH: ${{ inputs.HOLOCHAIN_SOURCE_BRANCH }}
        run: |
          set -exu

          cd ${HOLOCHAIN_REPO}

          nix develop .#release --ignore-environment --command bash -c '
            set -e
            cargo sweep -s

            release-automation \
              --workspace-path=$PWD \
              --log-level=debug \
              --match-filter="^(holochain|holochain_cli|kitsune_p2p_proxy)$" \
              release \
                --no-verify \
                --force-tag-creation \
                --force-branch-creation \
                --additional-manifests="crates/test_utils/wasm/wasm_workspace/Cargo.toml" \
                --allowed-semver-increment-modes="!pre_minor alpha" \
                --steps=CreateReleaseBranch,BumpReleaseVersions

            release-automation \
                --workspace-path=$PWD \
                --log-level=debug \
                release \
                  --dry-run \
                  --no-verify \
                  --steps=PublishToCratesIo

            cargo sweep -f
            '

          if ! git diff --exit-code --quiet ${HOLOCHAIN_SOURCE_BRANCH}; then
            echo "releasable_crates=true" >> $GITHUB_OUTPUT
          else
            echo "releasable_crates=false" >> $GITHUB_OUTPUT
          fi

      - name: Run dmesg on error
        if: ${{ failure() }}
        run: sudo dmesg

      - name: Cache cargo related build files
        uses: steveeJ-forks/actions-cache/save@main
        if: ${{ inputs.skip_prepare_logic != 'true' }}
        with:
          path: |
            /var/tmp/holochain_repo/.cargo/bin/
            /var/tmp/holochain_repo/.cargo/registry/index/
            /var/tmp/holochain_repo/.cargo/registry/cache/
            /var/tmp/holochain_repo/.cargo/git/db/
            /var/tmp/holochain_repo/target/
          key: ${{ runner.os }}-prepare-${{ github.run_id }}-${{ github.run_number }}

      - name: cache the repo and set outputs
        id: write-env-and-tag
        env:
          HOLOCHAIN_REPO: ${{ inputs.HOLOCHAIN_REPO }}
        run: |
          set -exu

          cd "${HOLOCHAIN_REPO}"

          git tag --sort=-taggerdate | grep holochain-

          export TAG=$(git tag --sort=-taggerdate | grep holochain- | head -n1)
          export VERSION=${TAG/holochain-/}
          export RELEASE_BRANCH=$(git branch --show-current)

          # clean the repo before adding it to the store
          git clean -fdx
          export STORE_PATH=$(nix store add-path --name holochain_repo .)

          echo "tag=${TAG}" >> $GITHUB_OUTPUT
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "release_branch=${RELEASE_BRANCH}" >> $GITHUB_OUTPUT
          echo "repo_nix_store_path=${STORE_PATH}" >> $GITHUB_OUTPUT

      - name: Setup SSH session
        uses: steveeJ-forks/action-upterm@main
        if: ${{ failure() && inputs.debug == 'true' }}
        env:
          HRA_GITHUB_TOKEN: ${{ secrets.HRA_GITHUB_TOKEN }}
        with:
          ## limits ssh access and adds the ssh public key for the user which triggered the workflow
          limit-access-to-actor: true
          ## limits ssh access and adds the ssh public keys of the listed GitHub users
          limit-access-to-users: steveeJ,jost-s,freesig,neonphog,thedavidmeister,maackle
