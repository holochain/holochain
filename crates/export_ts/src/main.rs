use holo_hash::export_ts::*;
use holo_hash::*;
use std::env::args;
use std::fs::write;
use std::path::PathBuf;
use ts_rs::TS;

const TS_RS_PREAMBLE_STR: &'static str = "// This file was generated by [ts-rs](https://github.com/Aleph-Alpha/ts-rs). Do not edit this file manually.\n\n";
const CUSTOM_PREAMBLE_STR: &'static str = "// This file was generated by [`export_ts` from the Holochain project](https://github.com/holochain/holochain/tree/main/crates/export_ts). Do not edit this file manually.\n\n";

macro_rules! add_type_to_buffer {
    ($type: ty, $buf: ident, $inline_comment: expr) => {
        print!("Exporting {}... ", stringify!($type));
        let result = <$type as TS>::export_to_string();
        match result {
            Ok(out) => {
                let comment_trimmed_l = out.replace(TS_RS_PREAMBLE_STR, "");
                let comment_trimmed = comment_trimmed_l.replace("\n", "");
                $buf.push_str(comment_trimmed.as_str());
                if $inline_comment != "" {
                    $buf.push_str(" // ");
                    $buf.push_str($inline_comment);
                }
                $buf.push_str("\n");
                print!("done.\n");
            }
            Err(err) => {
                print!("Error: {}\n", err);
            }
        }
    };

    ($type: ty, $buf: ident) => {
        add_type_to_buffer!($type, $buf, "");
    };
}

fn main() -> Result<(), Box<dyn std::error::Error>> {
    // Accept a path to export files to (files will be overwritten)
    // or default to the current working directory.
    let path_str = args().skip(1).take(1).next().unwrap_or(".".to_string());
    let path = PathBuf::from(path_str);

    print!("Outputting typescript types to {}:\n\n", path.display());

    // holo_hash
    let mut types_file_buffer = String::new();
    types_file_buffer.push_str(CUSTOM_PREAMBLE_STR);

    // TODO: Fill in the code that exports types.
    // Recommend creating a new function for each library, as below.
    types_file_buffer.push_str(output_types_for_x().as_str());

    // Write all the types we've collected into types.ts.
    let mut types_file_path = path.clone();
    types_file_path.push("types.ts");
    write(
        types_file_path.into_os_string().into_string().unwrap(),
        types_file_buffer.as_str(),
    )?;

    Ok(())
}

fn output_types_for_x() -> String {
    let mut buffer = String::new();
    print!("** x types\n\n");
    // Add lines that use add_type_to_buffer for each type you want to output.
    print!("Done.\n----------------\n\n");

    buffer
}
