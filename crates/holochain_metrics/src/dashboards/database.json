[{"apiVersion":"influxdata.com/v2alpha1","kind":"Dashboard","metadata":{"name":"pedantic-kapitsa-2a5001"},"spec":{"charts":[{"axes":[{"name":"x"},{"label":"seconds","name":"y"}],"binSize":10,"colors":[{"hex":"#000000"},{"hex":"#E69F00"},{"hex":"#56B4E9"},{"hex":"#009E73"},{"hex":"#F0E442"},{"hex":"#0072B2"},{"hex":"#D55E00"},{"hex":"#CC79A7"}],"height":4,"kind":"Heatmap","legendColorizeRows":true,"legendOpacity":1,"legendOrientationThreshold":100000000,"name":"Conductor db connection use time","queries":[{"query":"from(bucket: \"influxive\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"hc.db.connections.use_time.s\")\n  |> filter(fn: (r) => r[\"kind\"] == \"conductor\")\n  |> filter(fn: (r) => r[\"id\"] == \"Conductor\")\n  |> filter(fn: (r) => r[\"_field\"] == \"value\")\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n  |> yield(name: \"mean\")"}],"staticLegend":{},"width":6,"xCol":"_time","yCol":"_value"},{"axes":[{"name":"x"},{"label":"seconds","name":"y"}],"binSize":10,"colors":[{"hex":"#000000"},{"hex":"#E69F00"},{"hex":"#56B4E9"},{"hex":"#009E73"},{"hex":"#F0E442"},{"hex":"#0072B2"},{"hex":"#D55E00"},{"hex":"#CC79A7"}],"height":4,"kind":"Heatmap","legendColorizeRows":true,"legendOpacity":1,"legendOrientationThreshold":100000000,"name":"All DHT databases connection use time","queries":[{"query":"from(bucket: \"influxive\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"hc.db.connections.use_time.s\")\n  |> filter(fn: (r) => r[\"kind\"] == \"dht\")\n  |> filter(fn: (r) => r[\"_field\"] == \"value\")\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n  |> yield(name: \"mean\")"}],"staticLegend":{},"width":6,"xCol":"_time","yCol":"_value","yPos":4},{"colors":[{"id":"0","name":"laser","type":"min","hex":"#00C9FF"},{"id":"1","name":"comet","type":"max","hex":"#9394FF","value":100}],"decimalPlaces":0,"height":4,"kind":"Gauge","name":"Conductor database load","queries":[{"query":"from(bucket: \"influxive\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"hc.db.pool.utilization\")\n  |> filter(fn: (r) => r[\"kind\"] == \"conductor\")\n  |> filter(fn: (r) => r[\"id\"] == \"Conductor\")\n  |> filter(fn: (r) => r[\"_field\"] == \"value\")\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n  |> yield(name: \"mean\")"}],"staticLegend":{},"suffix":"%","width":3,"yPos":8},{"colors":[{"id":"0","name":"laser","type":"min","hex":"#00C9FF"},{"id":"1","name":"comet","type":"max","hex":"#9394FF","value":100}],"decimalPlaces":0,"height":4,"kind":"Gauge","name":"WASM database load","queries":[{"query":"from(bucket: \"influxive\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"hc.db.pool.utilization\")\n  |> filter(fn: (r) => r[\"kind\"] == \"wasm\")\n  |> filter(fn: (r) => r[\"id\"] == \"Wasm\")\n  |> filter(fn: (r) => r[\"_field\"] == \"value\")\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n  |> yield(name: \"mean\")"}],"staticLegend":{},"suffix":"%","width":3,"xPos":3,"yPos":8},{"axes":[{"name":"x"},{"label":"seconds","name":"y"}],"binSize":10,"colors":[{"hex":"#000000"},{"hex":"#E69F00"},{"hex":"#56B4E9"},{"hex":"#009E73"},{"hex":"#F0E442"},{"hex":"#0072B2"},{"hex":"#D55E00"},{"hex":"#CC79A7"}],"height":4,"kind":"Heatmap","legendColorizeRows":true,"legendOpacity":1,"legendOrientationThreshold":100000000,"name":"Wasm db connection use time","queries":[{"query":"from(bucket: \"influxive\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"hc.db.connections.use_time.s\")\n  |> filter(fn: (r) => r[\"kind\"] == \"wasm\")\n  |> filter(fn: (r) => r[\"id\"] == \"Wasm\")\n  |> filter(fn: (r) => r[\"_field\"] == \"value\")\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n  |> yield(name: \"mean\")"}],"staticLegend":{},"width":6,"xCol":"_time","xPos":6,"yCol":"_value"},{"axes":[{"name":"x"},{"label":"seconds","name":"y"}],"binSize":10,"colors":[{"hex":"#000000"},{"hex":"#E69F00"},{"hex":"#56B4E9"},{"hex":"#009E73"},{"hex":"#F0E442"},{"hex":"#0072B2"},{"hex":"#D55E00"},{"hex":"#CC79A7"}],"height":4,"kind":"Heatmap","legendColorizeRows":true,"legendOpacity":1,"legendOrientationThreshold":100000000,"name":"All authored databases connection use time","queries":[{"query":"from(bucket: \"influxive\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"hc.db.connections.use_time.s\")\n  |> filter(fn: (r) => r[\"kind\"] == \"authored\")\n  |> filter(fn: (r) => r[\"_field\"] == \"value\")\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n  |> yield(name: \"mean\")"}],"staticLegend":{},"width":6,"xCol":"_time","xPos":6,"yCol":"_value","yPos":4},{"colors":[{"id":"0","name":"laser","type":"min","hex":"#00C9FF"},{"id":"1","name":"comet","type":"max","hex":"#9394FF","value":100}],"decimalPlaces":0,"height":4,"kind":"Gauge","name":"DHT databases average load","queries":[{"query":"from(bucket: \"influxive\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"hc.db.pool.utilization\")\n  |> filter(fn: (r) => r[\"kind\"] == \"dht\")\n  |> filter(fn: (r) => r[\"_field\"] == \"value\")\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n  |> yield(name: \"mean\")"}],"staticLegend":{},"suffix":"%","width":3,"xPos":6,"yPos":8},{"colors":[{"id":"0","name":"laser","type":"min","hex":"#00C9FF"},{"id":"1","name":"comet","type":"max","hex":"#9394FF","value":100}],"decimalPlaces":0,"height":4,"kind":"Gauge","name":"Authored databases average load","queries":[{"query":"from(bucket: \"influxive\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"hc.db.pool.utilization\")\n  |> filter(fn: (r) => r[\"kind\"] == \"authored\")\n  |> filter(fn: (r) => r[\"_field\"] == \"value\")\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n  |> yield(name: \"mean\")"}],"staticLegend":{},"suffix":"%","width":3,"xPos":9,"yPos":8}],"name":"Holochain Database"}}]